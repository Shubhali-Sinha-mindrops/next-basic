{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n//import { useEffect, useState } from 'react';\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\";\n\nfunction HomePage(props) {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {               //here, this useEffect run after the execution of component function. It means that loadedMeetups is empty at first time and then the state changed.\n  //     setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n  //return <MeetupList meetups={loadedMeetups} />\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"React Meetups\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of active React meetups!\"\n      })]\n    }), /*#__PURE__*/_jsx(MeetupList, {\n      meetups: props.meetups\n    })]\n  });\n} // export async function getServerSideProps(context) {        //This code will always run on the server.\n//     //fetch data from an API\n//     //this async function gurantees to run for every request.But in this we have to wait until page regenerated fior every request.\n//     const req = context.req;\n//     const res = context.res;\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         }\n//     };\n// };      //this function will not run during the build process, but instead always on the server after deployment.\n\n\nexport async function getStaticProps() {\n  //this method return a promise since it is async and it will exceute first before the component function to load the data and send it to the component function through props.\n  //fetch data from an API/ database\n  //It make the page to run faster than serversideprops function just above and an alternate for this method.\n  const client = await MongoClient.connect(\"mongodb+srv://ShubhaliSinha:*123Sinha@cluster0.lc8qw.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    //data fetch for pre-Rendering and it will always return an object with a props key.\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString() //this will convert this value in a meaningful string which can be used later.\n\n      }))\n    },\n    revalidate: 1 //it is in seconds....to save the site from old data.This page will re-generated after the time mentioned after the deploy of the site.\n\n  };\n}\nexport default HomePage; //npm run build is a command need to run before deploy nextjs sites.","map":null,"metadata":{},"sourceType":"module"}