{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\biggerProject-next\\\\pages\\\\index.js\";\n//import { useEffect, useState } from 'react';\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\";\n\nfunction HomePage(props) {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {               //here, this useEffect run after the execution of component function. It means that loadedMeetups is empty at first time and then the state changed.\n  //     setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n  //return <MeetupList meetups={loadedMeetups} />\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n} // export async function getServerSideProps(context) {        //This code will always run on the server.\n//     //fetch data from an API\n//     //this async function gurantees to run for every request.But in this we have to wait until page regenerated fior every request.\n//     const req = context.req;\n//     const res = context.res;\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS\n//         }\n//     };\n// };      //this function will not run during the build process, but instead always on the server after deployment.\n\n\nexport async function getStaticProps() {\n  //this method return a promise since it is async and it will exceute first before the component function to load the data and send it to the component function through props.\n  //fetch data from an API/ database\n  //It make the page to run faster than serversideprops function just above and an alternate for this method.\n  const client = await MongoClient.connect(\"mongodb+srv://ShubhaliSinha:*123Sinha@cluster0.lc8qw.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    //data fetch for pre-Rendering and it will always return an object with a props key.\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString() //this will convert this value in a meaningful string which can be used later.\n\n      }))\n    },\n    revalidate: 1 //it is in seconds....to save the site from old data.This page will re-generated after the time mentioned after the deploy of the site.\n\n  };\n}\nexport default HomePage; //npm run build is a command need to run before deploy nextjs sites.","map":{"version":3,"sources":["D:/biggerProject-next/pages/index.js"],"names":["Fragment","Head","MeetupList","MongoClient","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB;AAEA;AACA;AACA;AACA;AAEA,sBACE,QAAC,QAAD;AAAA,4BACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA;AACA;AAEA,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CACnB,sGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACL;AACAV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,KAAa;AAChCC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADkB;AAEhCC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFgB;AAGhCC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHkB;AAIhCC,QAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX,EAJ4B,CAIL;;AAJK,OAAb,CAAZ;AADJ,KAFF;AAULC,IAAAA,UAAU,EAAE,CAVP,CAUU;;AAVV,GAAP;AAYD;AAED,eAAepB,QAAf,C,CAEA","sourcesContent":["//import { useEffect, useState } from 'react';\r\nimport { Fragment } from \"react\";\r\nimport Head from \"next/head\";\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nfunction HomePage(props) {\r\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\r\n\r\n  // useEffect(() => {               //here, this useEffect run after the execution of component function. It means that loadedMeetups is empty at first time and then the state changed.\r\n  //     setLoadedMeetups(DUMMY_MEETUPS);\r\n  // }, []);\r\n  //return <MeetupList meetups={loadedMeetups} />\r\n\r\n  return (\r\n    <Fragment>\r\n        <Head></Head>\r\n      <MeetupList meetups={props.meetups} />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n// export async function getServerSideProps(context) {        //This code will always run on the server.\r\n//     //fetch data from an API\r\n//     //this async function gurantees to run for every request.But in this we have to wait until page regenerated fior every request.\r\n//     const req = context.req;\r\n//     const res = context.res;\r\n\r\n//     return {\r\n//         props: {\r\n//             meetups: DUMMY_MEETUPS\r\n//         }\r\n//     };\r\n// };      //this function will not run during the build process, but instead always on the server after deployment.\r\n\r\nexport async function getStaticProps() {\r\n  //this method return a promise since it is async and it will exceute first before the component function to load the data and send it to the component function through props.\r\n  //fetch data from an API/ database\r\n  //It make the page to run faster than serversideprops function just above and an alternate for this method.\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://ShubhaliSinha:*123Sinha@cluster0.lc8qw.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find().toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    //data fetch for pre-Rendering and it will always return an object with a props key.\r\n    props: {\r\n      meetups: meetups.map((meetup) => ({\r\n        title: meetup.title,\r\n        address: meetup.address,\r\n        image: meetup.image,\r\n        id: meetup._id.toString(), //this will convert this value in a meaningful string which can be used later.\r\n      })),\r\n    },\r\n    revalidate: 1, //it is in seconds....to save the site from old data.This page will re-generated after the time mentioned after the deploy of the site.\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n\r\n//npm run build is a command need to run before deploy nextjs sites.\r\n"]},"metadata":{},"sourceType":"module"}